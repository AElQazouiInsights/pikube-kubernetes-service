import{_ as n,c as e,j as i,a as t,t as l,a0 as p,o as h}from"./chunks/framework.BOVrHxUX.js";const r="/pikube-kubernetes-service/assets/argocd.DtWebsN_.svg",o="/pikube-kubernetes-service/assets/pikube-cluster-cicd-gitops-architecture.drawio.DjGwZBRP.svg",m=JSON.parse('{"title":"GitOps with ArgoCD","description":"Implementing GitOps principles for Pi cluster management using ArgoCD.","frontmatter":{"title":"GitOps with ArgoCD","permalink":"/docs/11-argocd/1-gitops-with-argocd","description":"Implementing GitOps principles for Pi cluster management using ArgoCD.","last_modified_at":"07-02-2024"},"headers":[],"relativePath":"11-gitops/1-gitops-with-argocd.md","filePath":"11-gitops/1-gitops-with-argocd.md"}'),k={name:"11-gitops/1-gitops-with-argocd.md"},d={id:"frontmatter-title",tabindex:"-1"};function c(a,s,g,E,y,u){return h(),e("div",null,[i("h1",d,[t(l(a.$frontmatter.title)+" ",1),s[0]||(s[0]=i("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),s[1]||(s[1]=p('<p align="center"><img alt="prometheus" src="'+r+'" width="40%" height="%"></p><p><a href="https://argo-cd.readthedocs.io/en/stable/" target="_blank" rel="noreferrer"><strong><code>ArgoCD</code></strong></a> is a declarative GitOps tool designed for the continuous delivery of applications within Kubernetes environments.</p><p>It facilitates integration with various Git repositories and can be used alongside CI tools, such as <a href="https://www.jenkins.io/" target="_blank" rel="noreferrer"><strong><code>Jenkins</code></strong></a> or <a href="https://docs.github.com/en/actions" target="_blank" rel="noreferrer"><strong><code>GitHub Actions</code></strong></a>, to establish a comprehensive CI/CD pipeline. This pipeline automates the process of building and deploying applications to Kubernetes.</p><p align="center"><img alt="prometheus" src="'+o+`" width="%" height="%"></p><p>Utilizing the GitOps model, <strong><code>ArgoCD</code></strong> treats Git repositories as the authoritative source for defining the desired state of applications, represented through Kubernetes manifests. These manifests can be defined in multiple formats, including:</p><ul><li>Kustomize applications</li><li>Helm charts</li><li>Directories containing YAML/JSON manifests</li></ul><p><strong><code>ArgoCD</code></strong> ensures the automated deployment of applications to their designated environments based on the configurations stored in a Git repository. Deployments can be synchronized with branch updates, tag changes, or fixed to a specific manifest version identified by a Git commit.</p><p>In the PiKube Cluster, <strong><code>ArgoCD</code></strong> will play a crucial role in the automatic deployment of various applications, streamlining operations within the Kubernetes cluster.</p><h2 id="argocd-installation" tabindex="-1">ArgoCD Installation <a class="header-anchor" href="#argocd-installation" aria-label="Permalink to &quot;ArgoCD Installation&quot;">​</a></h2><h3 id="helm-chart-installation" tabindex="-1">Helm Chart Installation <a class="header-anchor" href="#helm-chart-installation" aria-label="Permalink to &quot;Helm Chart Installation&quot;">​</a></h3><p>ArgoCD can be efficiently installed via Helm charts, following these steps:</p><ul><li>Add the ArgoCD Helm repository</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> argo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://argoproj.github.io/argo-helm</span></span></code></pre></div><ul><li>Update the repository to fetch the latest charts</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><ul><li>Create a dedicated namespace for ArgoCD</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> argocd</span></span></code></pre></div><p>Prepare the <strong><code>argocd-values.yaml</code></strong> file with configurations</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    server.insecure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Server runs without TLS; NGINX ingress handles TLS</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    statusbadge.enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;true&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Enable status badge</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    resource.customizations.health.argoproj.io_Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Health check for Application resources</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      hs = {}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      hs.status = &quot;Progressing&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      hs.message = &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      if obj.status ~= nil then</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        if obj.status.health ~= nil then</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          hs.status = obj.status.health.status</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          if obj.status.health.message ~= nil then</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            hs.message = obj.status.health.message</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          end</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        end</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      end</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      return hs</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    kustomize.buildOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--enable-helm</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Helm chart rendering with Kustomize</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ingress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ingressClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nginx</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    hosts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argocd.picluster.quantfinancehub.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    tls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">secretName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argocd-tls</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        hosts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argocd.picluster.quantfinancehub.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      nginx.ingress.kubernetes.io/service-upstream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      cert-manager.io/cluster-issuer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">letsencrypt-issuer</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      cert-manager.io/common-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argocd.picluster.quantfinancehub.com</span></span></code></pre></div><ul><li>Install ArgoCD with the Helm chart</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> argocd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> argo/argo-cd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> argocd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> argocd-values.yaml</span></span></code></pre></div><ul><li>Retrieve the ArgoCD admin password</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> argocd-initial-admin-secret</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsonpath=&#39;{.data.password}&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> argocd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><ul><li>Set up Port Forwarding for ArgoCD server access</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port-forward</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> svc/argocd-server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> argocd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --address</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0.0.0</span></span></code></pre></div><ul><li>Access the ArgoCD UI with the <strong><code>admin</code></strong> credentials</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;server-port-forwarding&gt;:8080</span></span></code></pre></div><h3 id="configuring-argocd-ingress" tabindex="-1">Configuring ArgoCD Ingress <a class="header-anchor" href="#configuring-argocd-ingress" aria-label="Permalink to &quot;Configuring ArgoCD Ingress&quot;">​</a></h3><p>With NGINX acting as the ingress controller for TLS termination, ArgoCD&#39;s API server can safely run without HTTPS. This approach is already configured in the provided argocd-values.yaml.</p><p>For further details on ArgoCD&#39;s Ingress setup, refer to the <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/" target="_blank" rel="noreferrer"><strong><code>Argo-CD Ingress configuration documentation</code></strong></a>.</p><h2 id="managing-resource-synchronization-in-argocd" tabindex="-1">Managing Resource Synchronization in ArgoCD <a class="header-anchor" href="#managing-resource-synchronization-in-argocd" aria-label="Permalink to &quot;Managing Resource Synchronization in ArgoCD&quot;">​</a></h2><p>To ensure optimal operation within your Kubernetes environment, it&#39;s crucial to tailor ArgoCD&#39;s resource synchronization behavior, especially for resources that ArgoCD does not originate. Automatic synchronization and pruning, while beneficial for many scenarios, may inadvertently affect certain Kubernetes resources, leading to undesired outcomes.</p><h3 id="issue-with-automatic-synchronization" tabindex="-1">Issue with Automatic Synchronization <a class="header-anchor" href="#issue-with-automatic-synchronization" aria-label="Permalink to &quot;Issue with Automatic Synchronization&quot;">​</a></h3><p>An example of such unintended effects is observed with VolumeSnapshot and VolumeSnapshotContent resources, which are typically generated by backup processes. Automatic synchronization policies in ArgoCD can prune these resources, potentially disrupting the backup procedure. This issue is documented in issue #273, highlighting the challenges of auto-pruning resources crucial for operations like backups.</p><h3 id="solution-excluding-specific-resources" tabindex="-1">Solution: Excluding Specific Resources <a class="header-anchor" href="#solution-excluding-specific-resources" aria-label="Permalink to &quot;Solution: Excluding Specific Resources&quot;">​</a></h3><p>To address this, ArgoCD offers a configuration to exclude certain resources from the synchronization process, thereby preventing the automatic pruning of vital resources like VolumeSnapshot and VolumeSnapshotContent. This configuration ensures that ArgoCD does not interfere with the lifecycle of resources generated by other processes, such as backups.</p><h4 id="configuring-argocd-to-exclude-resources" tabindex="-1">Configuring ArgoCD to Exclude Resources <a class="header-anchor" href="#configuring-argocd-to-exclude-resources" aria-label="Permalink to &quot;Configuring ArgoCD to Exclude Resources&quot;">​</a></h4><p>To implement this solution, specific configurations need to be added to the ArgoCD helm chart. These settings instruct ArgoCD to ignore the specified resources during its synchronization operations.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Resource exclusion configuration</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Prevents ArgoCD from synchronizing specific resources</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    resource.exclusions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      - apiGroups:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        - snapshot.storage.k8s.io</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        kinds:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        - VolumeSnapshot</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        - VolumeSnapshotContent</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        clusters:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        - &quot;*&quot;</span></span></code></pre></div><p>This configuration effectively excludes VolumeSnapshot and VolumeSnapshotContent resources from ArgoCD&#39;s synchronization process, aligning with best practices for resource management. For more detailed instructions on resource exclusion, refer to the <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#resource-exclusioninclusion" target="_blank" rel="noreferrer"><strong><code>ArgoCD documentation on resource exclusion/inclusion</code></strong></a>.</p><h2 id="managing-argocd-applications-for-the-pikube-cluster" tabindex="-1">Managing ArgoCD Applications for the PiKube Cluster <a class="header-anchor" href="#managing-argocd-applications-for-the-pikube-cluster" aria-label="Permalink to &quot;Managing ArgoCD Applications for the PiKube Cluster&quot;">​</a></h2><p>ArgoCD provides versatile ways to manage and deploy applications within a Kubernetes cluster, utilizing its UI or specific Custom Resource Definitions (CRDs) like Application or ApplicationSet. For the Pi Cluster, various types of applications will be deployed, each requiring a distinct configuration approach.</p><h3 id="directory-applications" tabindex="-1">Directory Applications <a class="header-anchor" href="#directory-applications" aria-label="Permalink to &quot;Directory Applications&quot;">​</a></h3><p>Directory applications deploy manifest files (.yml, .yaml, and .json) from a specific directory within a Git repository. These can be configured declaratively using the Application CRD.</p><p><strong>Example Application Manifest:</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argoproj.io/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Application</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test-app</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  destination</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;target-namespace&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://kubernetes.default.svc</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    directory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      recurse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Enables Recursive Resource Detection</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test-app</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    repoURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://github.com/&lt;user&gt;/&lt;repo&gt;.git</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    targetRevision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">HEAD</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  syncPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    automated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      prune</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Enables resource pruning</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      selfHeal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Enables self-healing</span></span></code></pre></div><p><strong>Key Configuration Details:</strong></p><ul><li><strong><code>destination.namespace</code></strong> specifies the namespace where the application will be deployed.</li><li><strong><code>destination.server</code></strong> indicates the cluster for deployment; <a href="https://kubernetes.default.svc" target="_blank" rel="noreferrer">https://kubernetes.default.svc</a> refers to the local cluster.</li><li><strong><code>source.repoURL</code></strong> is the URL of the Git repository containing the application.</li><li><strong><code>source.path</code></strong> is the directory within the Git repository.</li><li><strong><code>source.targetRevision</code></strong> tracks a specific Git tag, branch, or commit.</li><li><strong><code>syncPolicy.automated</code></strong> includes options for automatic synchronization, pruning of obsolete resources, and self-healing.</li></ul><h3 id="helm-chart-applications" tabindex="-1">Helm Chart Applications <a class="header-anchor" href="#helm-chart-applications" aria-label="Permalink to &quot;Helm Chart Applications&quot;">​</a></h3><p>Helm chart applications can also be deployed in a declarative manner using ArgoCD’s Application CRD.</p><p>Example Helm Application Manifest:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argoproj.io/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Application</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cert-manager</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argocd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    chart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cert-manager</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    repoURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://charts.jetstack.io</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    targetRevision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1.10.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    helm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      releaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cert-manager</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">installCRDs</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  destination</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://kubernetes.default.svc&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cert-manager</span></span></code></pre></div><p><strong>Configuration Highlights:</strong></p><ul><li><strong><code>chart</code></strong> specifies the Helm chart to deploy.</li><li><strong><code>repoURL</code></strong> is the URL of the Helm repository.</li><li><strong><code>releaseName</code></strong> identifies the chart version to deploy.</li><li><strong><code>parameters</code></strong> allow overriding default chart values.</li></ul><h3 id="kustomize-applications" tabindex="-1">Kustomize Applications <a class="header-anchor" href="#kustomize-applications" aria-label="Permalink to &quot;Kustomize Applications&quot;">​</a></h3><p><a href="https://kustomize.io/" target="_blank" rel="noreferrer"><strong><code>Kustomize</code></strong></a> offers a method to customize Kubernetes manifests directly, supported natively by ArgoCD. It reads a <strong><code>kustomization.yaml</code></strong> file to manage the deployment of YAML files or charts through Kustomize.</p><p><strong>Kustomize in Directory Applications:</strong></p><p>A directory application can be enhanced with Kustomize by including a kustomization.yaml file in the directory. This approach allows ArgoCD to deploy and manage the application using Kustomize configurations.</p><h2 id="utilizing-helm-umbrella-charts-in-argocd" tabindex="-1">Utilizing Helm Umbrella Charts in ArgoCD <a class="header-anchor" href="#utilizing-helm-umbrella-charts-in-argocd" aria-label="Permalink to &quot;Utilizing Helm Umbrella Charts in ArgoCD&quot;">​</a></h2><h3 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h3><p>In scenarios where ArgoCD needs to deploy Helm charts from third-party repositories, the limitation that a Helm values file must reside in the same Git repository as the Helm chart presents a challenge. Directly incorporating a large number of parameters within the Application definition for complex charts is impractical. To address this, the Helm Umbrella Chart pattern offers a streamlined solution.</p><h3 id="helm-umbrella-chart-pattern" tabindex="-1">Helm Umbrella Chart Pattern <a class="header-anchor" href="#helm-umbrella-chart-pattern" aria-label="Permalink to &quot;Helm Umbrella Chart Pattern&quot;">​</a></h3><p>A Helm Umbrella Chart acts as a &quot;meta&quot; or wrapper chart that aggregates other Helm charts as dependencies (<a href="https://helm.sh/docs/chart_template_guide/subcharts_and_globals/" target="_blank" rel="noreferrer"><strong><code>subcharts</code></strong></a>). This approach involves creating an essentially empty Helm chart that contains only a chart definition file (<strong><code>Chart.yaml</code></strong>) and a corresponding <strong><code>values.yaml</code></strong> file. These files define the subcharts and their configuration values.</p><p><strong>Example Chart Definition (Chart.yaml):</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">certmanager</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cert-manager</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1.10.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    repository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://charts.jetstack.io</span></span></code></pre></div><p><strong>Example Values Configuration (values.yaml):</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cert-manager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  installCRDs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>This structure allows for the declarative deployment of directory-type applications in ArgoCD, referencing the Umbrella Chart.</p><h3 id="deploying-an-umbrella-chart-application" tabindex="-1">Deploying an Umbrella Chart Application <a class="header-anchor" href="#deploying-an-umbrella-chart-application" aria-label="Permalink to &quot;Deploying an Umbrella Chart Application&quot;">​</a></h3><p><strong>Example Application Manifest:</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argoproj.io/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Application</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">umbrella-chart-app</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  destination</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;target-namespace&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://kubernetes.default.svc</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;repo-path&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    repoURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://github.com/&lt;user&gt;/&lt;repo&gt;.git</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    targetRevision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">HEAD</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  helm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Additional Helm options here</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  syncPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    automated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      prune</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      selfHeal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>ArgoCD utilizes the <strong><code>helm template</code></strong> command, rather than <strong><code>helm install</code></strong>, to render charts and applies the output using <strong><code>kubectl</code></strong>. This approach ensures compatibility with ArgoCD&#39;s declarative model and GitOps workflows.</p><p><strong>Rendering and Applying Helm Templates:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> template</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        --dependency-update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        --namespace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">target-namespac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">repo-pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">target-namespac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span></code></pre></div><p><strong>Customizing Helm Deployment:</strong></p><p>Additional options for Helm can be specified using <strong><code>.spec.helm</code></strong> parameters in the Application resource, such as <strong><code>helm.valueFiles</code></strong> for custom values files and <strong><code>helm.skipCRDs</code></strong> to skip CRD installation.</p><blockquote><p>📌 <strong>Note</strong></p><p><em>While the empty chart pattern is predominant in using umbrella charts, additional configurations, such as a <strong><code>template</code></strong> directory for extra manifest files, are incorporated as necessary to tailor the deployment process. This flexibility has been instrumental in deploying Kubernetes services within the Pi Cluster using both packaged Helm applications and Kustomize configurations.</em></p></blockquote><h2 id="bootstrapping-pikube-cluster-using-the-app-of-apps-pattern" tabindex="-1">Bootstrapping PiKube Cluster Using the App of Apps Pattern <a class="header-anchor" href="#bootstrapping-pikube-cluster-using-the-app-of-apps-pattern" aria-label="Permalink to &quot;Bootstrapping PiKube Cluster Using the App of Apps Pattern&quot;">​</a></h2><p>The <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/" target="_blank" rel="noreferrer"><strong><code>App of Apps pattern</code></strong></a> offers a structured approach for initializing and managing clusters in Argo CD. This design pattern involves creating a root Argo CD Application that contains other Argo CD Applications, effectively orchestrating a hierarchy of applications for systematic deployment.</p><h3 id="understanding-the-app-of-apps-design" tabindex="-1">Understanding the App of Apps Design <a class="header-anchor" href="#understanding-the-app-of-apps-design" aria-label="Permalink to &quot;Understanding the App of Apps Design&quot;">​</a></h3><p>This methodology simplifies the deployment process by organizing applications into a manageable structure where a single root application triggers the deployment of subordinate applications. Each application is defined by its own set of Application manifest files, allowing for granular control and management.</p><h3 id="deployment-order-with-syncwaves-and-synchooks" tabindex="-1">Deployment Order with Syncwaves and Synchooks <a class="header-anchor" href="#deployment-order-with-syncwaves-and-synchooks" aria-label="Permalink to &quot;Deployment Order with Syncwaves and Synchooks&quot;">​</a></h3><p>Argo CD utilizes <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves/" target="_blank" rel="noreferrer"><strong><code>Syncwaves and Synchooks</code></strong></a> to manage the sequence of application deployments within an App of Apps configuration. These tools enable administrators to specify the deployment order through annotations (argocd.argoproj.io/sync-wave) on the application manifests. Syncwaves are denoted by integer values, where lower numbers indicate higher priority for deployment. Applications within the same sync-wave are deployed concurrently and must reach a healthy state before Argo CD proceeds to the next wave.</p><h3 id="ensuring-application-health" tabindex="-1">Ensuring Application Health <a class="header-anchor" href="#ensuring-application-health" aria-label="Permalink to &quot;Ensuring Application Health&quot;">​</a></h3><p>The health status of each component application is crucial for the overall health of the root application. <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/health/" target="_blank" rel="noreferrer"><strong><code>Argo CD performs health checks</code></strong></a> on a variety of standard Kubernetes resources, aggregating these into the application&#39;s health status. Only when all included resources, such as Deployments, Services, and PersistentVolumeClaims, are deemed healthy, will the entire application be considered healthy.</p><p>Custom health checks can be added to supplement the built-in checks, providing additional layers of validation for the application&#39;s resources. This is particularly important for the App of Apps pattern, where the health status of nested applications influences the deployment process.</p><h3 id="custom-health-checks-for-application-crds" tabindex="-1">Custom Health Checks for Application CRDs <a class="header-anchor" href="#custom-health-checks-for-application-crds" aria-label="Permalink to &quot;Custom Health Checks for Application CRDs&quot;">​</a></h3><p>From <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/health/#argocd-app" target="_blank" rel="noreferrer"><strong><code>Argo CD release 1.8 onwards</code></strong></a>, the health check for the Application CRD is not included by default and must be explicitly defined in the Argo CD configuration. Below is an example of how to add a custom health check for Application resources</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resource.customizations.health.argoproj.io_Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  hs = {}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  hs.status = &quot;Progressing&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  hs.message = &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  if obj.status ~= nil then</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    if obj.status.health ~= nil then</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      hs.status = obj.status.health.status</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      if obj.status.health.message ~= nil then</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        hs.message = obj.status.health.message</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      end</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    end</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  end</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  return hs</span></span></code></pre></div><p>This configuration snippet ensures that the health of Application resources, crucial for the App of Apps pattern, is properly evaluated and factored into the overall application health assessment.</p><h2 id="establishing-a-root-application-with-helm-in-argocd" tabindex="-1">Establishing a Root Application with Helm in ArgoCD <a class="header-anchor" href="#establishing-a-root-application-with-helm-in-argocd" aria-label="Permalink to &quot;Establishing a Root Application with Helm in ArgoCD&quot;">​</a></h2><p>The Root Application serves as the cornerstone for cluster initialization, leveraging Helm templating to automate the creation and configuration of ArgoCD Application resources and essential initial resources.</p><h3 id="directory-structure-within-the-git-repository" tabindex="-1">Directory Structure within the Git Repository <a class="header-anchor" href="#directory-structure-within-the-git-repository" aria-label="Permalink to &quot;Directory Structure within the Git Repository&quot;">​</a></h3><p>A structured directory within the Git repository facilitates organized resource management</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Chart.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> templates</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app-set.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> namespaces.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> other-manifests.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> values.yaml</span></span></code></pre></div><h3 id="configuration-files-overview" tabindex="-1">Configuration Files Overview <a class="header-anchor" href="#configuration-files-overview" aria-label="Permalink to &quot;Configuration Files Overview&quot;">​</a></h3><p><strong>Chart.yaml Setup:</strong></p><p>Defines the Helm chart for the bootstrap process.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bootstrap</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0.0</span></span></code></pre></div><p><strong>values.yaml Configuration:</strong></p><p>Specifies the GitOps repository details, revision, and the applications to be deployed in sync waves.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">gitops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  repo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://github.com/Crypto-Aggressor/PiKube-Kubernetes-Cluster</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  revision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">crds</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argocd/bootstrap/crds</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    syncWave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">external-secrets</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">external-secrets</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argocd/system/external-secrets</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    syncWave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">metallb</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">metallb</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argocd/system/metallb</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    syncWave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span></code></pre></div><h3 id="application-set-template" tabindex="-1">Application Set Template <a class="header-anchor" href="#application-set-template" aria-label="Permalink to &quot;Application Set Template&quot;">​</a></h3><p>This template, <strong><code>app-set.yaml</code></strong>, dynamically generates an ArgoCD application for each entry under the apps dictionary in the <strong><code>values.yaml</code></strong> file, specifying application details such as name, deployment namespace, sync wave, and path in the repository.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">range $index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$app := .Values.apps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argoproj.io/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Application</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {{ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$app.name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {{ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$.Release.Namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    argocd.argoproj.io/sync-wave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{{ default 0 $app.syncWave }}&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  destination</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {{ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$app.namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://kubernetes.default.svc</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {{ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$app.path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    repoURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {{ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$.Values.gitops.repo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    targetRevision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {{ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$.Values.gitops.revision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {{- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">if $app.helm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  helm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {{ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">toYaml $app.helm | indent 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {{- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  syncPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    automated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      prune</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      selfHeal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    retry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      backoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1m</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        maxDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">16m</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        factor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    syncOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CreateNamespace=true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ServerSideApply=true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ApplyOutOfSyncOnly=true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span></code></pre></div><h3 id="namespace-creation" tabindex="-1">Namespace Creation <a class="header-anchor" href="#namespace-creation" aria-label="Permalink to &quot;Namespace Creation&quot;">​</a></h3><p>This template, <strong><code>namespaces.yaml</code></strong>, manages the creation of namespaces, potentially including annotations for service mesh integration like Linkerd.</p><h3 id="additional-manifests" tabindex="-1">Additional Manifests <a class="header-anchor" href="#additional-manifests" aria-label="Permalink to &quot;Additional Manifests&quot;">​</a></h3><p>Additional Kubernetes manifest files ,<strong><code>other-manifests.yaml</code></strong>, required for cluster bootstrap can be included here.</p><blockquote><p>📌 <strong>Note</strong><em>The root application created for the PiKube Cluster demonstrates a comprehensive approach to using the App of Apps pattern with Helm for Kubernetes cluster management. This pattern not only simplifies application deployment but also ensures a scalable and maintainable cluster infrastructure setup.</em></p><p><em>The full configuration for the PiKube Cluster&#39;s root application is available at /argocd/bootstrap/root, showcasing a practical implementation of these concepts.</em></p></blockquote><h2 id="establishing-secure-gitops-with-argocd-deploying-the-root-application" tabindex="-1">Establishing Secure GitOps with ArgoCD: Deploying the Root Application <a class="header-anchor" href="#establishing-secure-gitops-with-argocd-deploying-the-root-application" aria-label="Permalink to &quot;Establishing Secure GitOps with ArgoCD: Deploying the Root Application&quot;">​</a></h2><p>Deploying the root application within ArgoCD marks a crucial phase in configuring the Kubernetes environment, emphasizing the adoption of GitOps methodologies. Leveraging SSH for repository access not only fortifies the security of the Git repository interactions but also facilitates ArgoCD&#39;s seamless repository synchronization.</p><h3 id="preparing-for-argocd-ssh-authentication" tabindex="-1">Preparing for ArgoCD SSH Authentication <a class="header-anchor" href="#preparing-for-argocd-ssh-authentication" aria-label="Permalink to &quot;Preparing for ArgoCD SSH Authentication&quot;">​</a></h3><p>Before setting up ArgoCD to use SSH for Git repository access, it&#39;s necessary to ensure the GitHub SSH private key is available on the gateway machine where ArgoCD is running. This step is crucial for enabling secure repository synchronization via SSH.</p><p><strong>Transferring the GitHub SSH Private Key:</strong></p><p>If GitHub SSH private key is currently on a <em><code>Windows laptop</code></em> and needs to be transferred to the <strong><code>gateway</code></strong>, use the Secure Copy Protocol (SCP) with an intermediary SSH key for the gateway access. Ensure that the SSH service is running and accessible on <strong><code>gateway</code></strong>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/gateway-pi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/github</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pi@192.168.8.10:~/.ssh/github</span></span></code></pre></div><h3 id="preparing-ssh-authentication-for-argocd" tabindex="-1">Preparing SSH Authentication for ArgoCD <a class="header-anchor" href="#preparing-ssh-authentication-for-argocd" aria-label="Permalink to &quot;Preparing SSH Authentication for ArgoCD&quot;">​</a></h3><p>Secure access to the Git repository is essential for ArgoCD to perform its operations. This security measure is achieved through SSH authentication, necessitating the creation of a Kubernetes secret that encompasses the SSH private key.</p><p><strong>Procedure to Create an SSH Key Secret:</strong></p><ul><li><p><strong><code>SSH Key Setup</code></strong>: Generate an SSH key pair if you haven&#39;t already and ensure the public key is linked to your GitHub account.</p></li><li><p><strong><code>Secret Creation</code></strong>: Formulate a Kubernetes secret within the argocd namespace incorporating the SSH private key.</p></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> argocd-ssh-secret</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --from-file=sshPrivateKey=/home/pi/.ssh/github</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> argocd</span></span></code></pre></div><p>This operation results in a secret, <strong><code>argocd-ssh-secret</code></strong>, which ArgoCD will utilize for secure repository access.</p><h3 id="deploying-the-root-application" tabindex="-1">Deploying the Root Application <a class="header-anchor" href="#deploying-the-root-application" aria-label="Permalink to &quot;Deploying the Root Application&quot;">​</a></h3><p>The deployment of the root application in ArgoCD is achieved through a declarative approach by applying a specific manifest file. This root application orchestrates the initialization and management of other applications within the cluster, leveraging the power of GitOps for streamlined operations.</p><p><strong>Manifest File for Root Application Deployment:</strong></p><p>The following <em><code>argocd-root-application.yaml</code></em> snippet outlines the necessary configuration for deploying the root application. This manifest defines the application&#39;s metadata, its source location within a Git repository, and its synchronization policy aimed at automating deployment while ensuring robust management of resources.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argoproj.io/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Application</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">root</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argocd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  destination</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argocd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://kubernetes.default.svc</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">argocd/bootstrap/root</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    repoURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">git@github.com:Crypto-Aggressor/PiKube-Kubernetes-Cluster.git</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    targetRevision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  syncPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    automated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      prune</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Enables deletion of resources that are no longer in the repository.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      selfHeal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Automatically repairs deviations from the desired state.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    retry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Maximum number of sync attempts.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      backoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Initial delay between retries.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        maxDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">16m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Maximum delay between retries.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        factor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Factor by which the delay increases.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    syncOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CreateNamespace=true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Allows ArgoCD to create the namespace if it does not exist.</span></span></code></pre></div><p>Apply the configuration</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> argocd-root-application.yaml</span></span></code></pre></div><h2 id="crds-application-deployment-strategy" tabindex="-1">CRDs Application Deployment Strategy <a class="header-anchor" href="#crds-application-deployment-strategy" aria-label="Permalink to &quot;CRDs Application Deployment Strategy&quot;">​</a></h2><p>Deploying a dedicated application for Custom Resource Definitions (CRDs) in the initial sync wave establishes a foundational layer within the cluster. This strategy ensures that subsequent applications reliant on these CRDs can be deployed successfully, regardless of whether their corresponding controller services are already in place.</p><p><em><em>Purpose of a CRDs Application</em>:</em> A CRDs application serves as a prerequisite, setting up necessary CRDs ahead of other components. This is particularly beneficial for resources like the Prometheus Operator CRDs, enabling the deployment of Prometheus monitoring objects (ServiceMonitor, PodMonitor, etc.) for applications that are set up before the kube-prometheus-stack application. By doing so, it ensures a smoother deployment process and operational consistency across cluster services.</p><p><strong>Implementation Example:</strong></p><p>For a practical implementation of this strategy, consider the setup within the repository path /argocd/bootstrap/crds. This location typically contains the manifest files for the CRDs application, structured to be deployed in the first sync wave of the cluster bootstrap process.</p>`,135))])}const C=n(k,[["render",c]]);export{m as __pageData,C as default};
