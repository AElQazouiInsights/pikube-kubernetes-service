import{_ as o,c as h,j as s,a as t,t as c,a0 as i,b as p,w as a,a1 as d,B as k,o as r,G as u}from"./chunks/framework.BOVrHxUX.js";const g="/pikube-kubernetes-service/assets/metrics-server.DMjothth.svg",B=JSON.parse('{"title":"Metrics Server","description":"How to install the Kubernetes Metrics Server, a foundational component for CPU/Memory usage metrics and autoscaling.","frontmatter":{"title":"Metrics Server","permalink":"/docs/metrics-server/","description":"How to install the Kubernetes Metrics Server, a foundational component for CPU/Memory usage metrics and autoscaling.","last_modified_at":"30-01-2025"},"headers":[],"relativePath":"9-monitoring/1-metrics-server.md","filePath":"9-monitoring/1-metrics-server.md"}'),m={name:"9-monitoring/1-metrics-server.md"},b={id:"frontmatter-title",tabindex:"-1"};function C(n,e,v,f,F,y){const l=k("Mermaid");return r(),h("div",null,[s("h1",b,[t(c(n.$frontmatter.title)+" ",1),e[0]||(e[0]=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),e[2]||(e[2]=i('<p align="center"><img alt="metrics-server" src="'+g+'" width="60%" height="%"></p><p><strong>Metrics Server</strong> is a scalable, efficient source of container resource metrics in Kubernetes. It powers Kubernetes autoscaling features such as the <a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/" target="_blank" rel="noreferrer">Horizontal Pod Autoscaler (HPA)</a> and the <a href="https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler" target="_blank" rel="noreferrer">Vertical Pod Autoscaler</a>, and also provides metrics for <code>kubectl top</code>. This enables both real-time usage visibility and the ability to automatically scale workloads based on CPU and memory consumption.</p><h2 id="how-does-it-work" tabindex="-1">How Does It Work? <a class="header-anchor" href="#how-does-it-work" aria-label="Permalink to &quot;How Does It Work?&quot;">​</a></h2>',3)),(r(),p(d,null,{default:a(()=>[u(l,{id:"mermaid-10",class:"mermaid",graph:"flowchart%20RL%0A%20%20subgraph%20cluster%5BCluster%5D%0A%20%20%20%20direction%20RL%0A%20%20%20%20S%5B%3Cbr%3E%3Cbr%3E%5D%0A%20%20%20%20A%5BMetrics-%3Cbr%3EServer%5D%0A%20%20%20%20subgraph%20B%5BNodes%5D%0A%20%20%20%20%20%20direction%20TB%0A%20%20%20%20%20%20D%5BcAdvisor%5D%20--%3E%20C%5Bkubelet%5D%0A%20%20%20%20%20%20E%5BContainer%3Cbr%3Eruntime%5D%20--%3E%20D%0A%20%20%20%20%20%20E1%5BContainer%3Cbr%3Eruntime%5D%20--%3E%20D%0A%20%20%20%20%20%20P%5Bpod%20data%5D%20-.-%20C%0A%20%20%20%20end%0A%20%20%20%20L%5BAPI%3Cbr%3Eserver%5D%0A%20%20%20%20W%5BHPA%5D%0A%20%20%20%20C%20----%3E%7Cnode-level%3Cbr%3Eresource%20metrics%7C%20A%20--%3E%7CMetrics%3Cbr%3EAPI%7C%20L%20--%3E%20W%0A%20%20end%0AL%20---%3E%20K%5Bkubectl%3Cbr%3Etop%5D%0AclassDef%20box%20fill%3A%23fff%2Cstroke%3A%23000%2Cstroke-width%3A1px%2Ccolor%3A%23000%3B%0Aclass%20W%2CB%2CP%2CK%2Ccluster%2CD%2CE%2CE1%20box%0AclassDef%20spacewhite%20fill%3A%23ffffff%2Cstroke%3A%23fff%2Cstroke-width%3A0px%2Ccolor%3A%23000%0Aclass%20S%20spacewhite%0AclassDef%20k8s%20fill%3A%23326ce5%2Cstroke%3A%23fff%2Cstroke-width%3A1px%2Ccolor%3A%23fff%3B%0Aclass%20A%2CL%2CC%20k8s%0A"})]),fallback:a(()=>e[1]||(e[1]=[t(" Loading... ")])),_:1})),e[3]||(e[3]=i(`<p><em>Diagram adapted from <a href="https://kubernetes.io/docs/tasks/debug/debug-cluster/resource-metrics-pipeline/" target="_blank" rel="noreferrer">Kubernetes Resource Metrics Pipeline</a>.</em></p><ul><li><strong>metrics-server</strong> queries each node’s <strong>kubelet</strong> for CPU and memory usage.</li><li><strong>kubelet</strong> aggregates container runtime usage stats (often via <a href="https://github.com/google/cadvisor" target="_blank" rel="noreferrer">cAdvisor</a>) and exposes them through the <strong>Resource Metrics API</strong>.</li><li><strong>metrics-server</strong> then exposes these aggregated metrics to the Kubernetes <strong>API server</strong>.</li><li><code>kubectl top</code> can read these values to debug usage, while <strong>HPA</strong> uses them to scale pods automatically.</li></ul><h2 id="metrics-server-in-k3s" tabindex="-1">Metrics Server in K3s <a class="header-anchor" href="#metrics-server-in-k3s" aria-label="Permalink to &quot;Metrics Server in K3s&quot;">​</a></h2><p>K3s installs Metrics Server by default as an add-on, so you typically have a working metrics pipeline out of the box. If needed, you can disable it (<code>--disable metrics-server</code> when installing K3s) and install your own Helm-managed instance for greater version or config control.</p><h2 id="installing-metrics-server-via-helm" tabindex="-1">Installing Metrics Server via Helm <a class="header-anchor" href="#installing-metrics-server-via-helm" aria-label="Permalink to &quot;Installing Metrics Server via Helm&quot;">​</a></h2><p>If you’re on a cluster that doesn’t include Metrics Server by default (or you disabled it in K3s), you can install it via the <a href="https://github.com/kubernetes-sigs/metrics-server/tree/master/charts/metrics-server" target="_blank" rel="noreferrer">official Helm chart</a>:</p><ul><li>Add the repository:</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> metrics-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://kubernetes-sigs.github.io/metrics-server/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><ul><li>Install into the <code>kube-system</code> namespace (or another namespace you prefer):</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> metrics-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> metrics-server/metrics-server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-system</span></span></code></pre></div><ul><li>Verify installation:</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pods</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-system</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> metrics-server</span></span></code></pre></div><ul><li>If everything is running smoothly, you can then confirm metrics availability:</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> top</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> top</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pods</span></span></code></pre></div><p>These commands should display current CPU/memory usage, confirming that <strong>Metrics Server</strong> is correctly providing resource data to the cluster.</p>`,15))])}const E=o(m,[["render",C]]);export{B as __pageData,E as default};
