import{_ as i,c as a,a0 as n,o as e}from"./chunks/framework.pWuaoOf3.js";const t="/pikube-kubernetes-service/assets/linkerd-logo.BCkqpCTc.svg",c=JSON.parse('{"title":"Service Mesh with Linkerd","description":"Service-mesh architecture using Linkerd to enhance observability, manage traffic, and bolster security in PiKube Kubernetes Service.","frontmatter":{"title":"Service Mesh with Linkerd","permalink":"/documentation/12-microservices/2-service-mesh-linkerd/","description":"Service-mesh architecture using Linkerd to enhance observability, manage traffic, and bolster security in PiKube Kubernetes Service.","last_modified_at":"26-02-2024"},"headers":[],"relativePath":"12-microservices/2-service-mesh-linkerd.md","filePath":"12-microservices/2-service-mesh-linkerd.md"}'),l={name:"12-microservices/2-service-mesh-linkerd.md"};function h(p,s,k,r,o,d){return e(),a("div",null,s[0]||(s[0]=[n('<p align="center"><img alt="service-mesh-with-linkerd" src="'+t+`" width="100%" height="%"></p><ul><li><a href="#introduction-to-service-mesh">Introduction to Service Mesh</a></li><li><a href="#selecting-linkerd-over-istio">Selecting Linkerd over Istio</a></li><li><a href="#overview-of-linkerds-architecture">Overview of Linkerd&#39;s Architecture</a></li><li><a href="#automated-mtls-and-integration-with-cert-manager">Automated mTLS and Integration with Cert-Manager</a></li><li><a href="#installing-linkerd-with-automated-tls-credential-rotation">Installing Linkerd with Automated TLS Credential Rotation</a></li><li><a href="#configuring-hashicorp-vault-with-a-custom-configuration-and-systemd-service">Configuring HashiCorp Vault with a Custom Configuration and Systemd Service</a><ul><li><a href="#initial-setup-cert-manager-configuration">Initial Setup: Cert-Manager Configuration</a></li><li><a href="#deploying-linkerd-with-helm">Deploying Linkerd with Helm</a><ul><li><a href="#alternative-installation-via-gitops-argocd">Alternative Installation via GitOps (ArgoCD)</a></li></ul></li><li><a href="#integrating-the-linkerd-viz-extension">Integrating the Linkerd Viz Extension</a></li><li><a href="#installing-the-linkerd-jaeger-extension-for-distributed-tracing">Installing the Linkerd Jaeger Extension for Distributed Tracing</a></li></ul></li><li><a href="#integrating-services-with-linkerd">Integrating Services with Linkerd</a><ul><li><a href="#handling-kubernetes-jobs-with-linkerd">Handling Kubernetes Jobs with Linkerd</a></li></ul></li><li><a href="#integrating-cluster-services-with-linkerd">Integrating Cluster Services with Linkerd</a><ul><li><a href="#incorporating-longhorn-into-the-service-mesh">Incorporating Longhorn into the Service Mesh</a></li><li><a href="#configuring-the-prometheus-stack-with-linkerd">Configuring the Prometheus Stack with Linkerd</a></li><li><a href="#integrating-linkerd-service-mesh-with-efk">Integrating Linkerd Service Mesh with EFK</a></li><li><a href="#linkerd-integration-with-velero">Linkerd Integration with Velero</a></li></ul></li><li><a href="#setting-up-ingress-with-linkerd">Setting Up Ingress with Linkerd</a><ul><li><a href="#integrating-traefik-with-linkerd">Integrating Traefik with Linkerd</a></li><li><a href="#integrating-nginx-ingress-with-linkerd">Integrating NGINX Ingress with Linkerd</a></li></ul></li></ul><h2 id="introduction-to-service-mesh" tabindex="-1">Introduction to Service Mesh <a class="header-anchor" href="#introduction-to-service-mesh" aria-label="Permalink to &quot;Introduction to Service Mesh&quot;">​</a></h2><p>Exploring the advantages of service mesh architecture, this section highlights the integration of observability, traffic management, and security enhancements within cluster communications.</p><p>The choice for implementing this architecture falls on <a href="https://linkerd.io/" target="_blank" rel="noreferrer"><strong><code>Linkerd</code></strong></a>, deployed within PiKube Kubernetes Service, due to its comprehensive features and compatibility.</p><h2 id="selecting-linkerd-over-istio" tabindex="-1">Selecting Linkerd over Istio <a class="header-anchor" href="#selecting-linkerd-over-istio" aria-label="Permalink to &quot;Selecting Linkerd over Istio&quot;">​</a></h2><ul><li><strong>ARM Compatibility</strong></li></ul><p>Unlike <a href="https://istio.io/" target="_blank" rel="noreferrer"><strong><code>Istio</code></strong></a>, the most recognized service mesh framework which lacks support for ARM64 architecture, <a href="https://linkerd.io/" target="_blank" rel="noreferrer"><strong><code>Linkerd</code></strong></a>, a project that has graduated from the Cloud Native Computing Foundation (CNCF), has extended its support to ARM64 architectures starting from its 2.9 release, as highlighted in the <a href="https://linkerd.io/2020/11/09/announcing-linkerd-2.9/" target="_blank" rel="noreferrer"><strong><code>Linkerd 2.9 release announcement</code></strong></a>.</p><ul><li><strong>Efficiency and Minimal Resource Usage</strong></li></ul><p>Linkerd differentiates itself by utilizing a bespoke communication proxy. This sidecar container, deployed alongside any pod, is designed specifically for Kubernetes communications, intercepting all inbound and outbound traffic. This approach, compared to the more generic Envoy proxy used by other service mesh frameworks like Istio and Consul, allows Linkerd&#39;s proxy to be more streamlined, lightweight, and secure, tailored exclusively for Kubernetes environments.</p><p>The resulting ultra-light proxy boasts a reduced memory and CPU footprint, offering superior performance that is particularly advantageous for devices with limited computing resources, such as Raspberry Pis. For a detailed comparison of performance and resource usage, refer to the latest <a href="https://linkerd.io/2021/11/29/linkerd-vs-istio-benchmarks-2021/" target="_blank" rel="noreferrer"><strong><code>Istio vs Linkerd benchmarking</code></strong></a>.</p><h2 id="overview-of-linkerd-s-architecture" tabindex="-1">Overview of Linkerd&#39;s Architecture <a class="header-anchor" href="#overview-of-linkerd-s-architecture" aria-label="Permalink to &quot;Overview of Linkerd&#39;s Architecture&quot;">​</a></h2><p>The Linkerd service mesh architecture is structured into three main components: the <strong><code>control plane</code></strong>, <strong><code>data plane</code></strong>, and <strong><code>observability plane</code></strong>, illustrated in the diagram below:</p><p>TODO pikube-linkerd-architecture.drawio</p><ul><li><p><strong><code>Control Plane:</code></strong> Manages the automatic injection of data plane components into pods (<strong><code>proxy-injector</code></strong>), generates and authorizes certificates for mutual Transport Layer Security (mTLS) communication (<strong><code>identity</code></strong>), and oversees traffic flow control services (<strong><code>destination</code></strong>).</p></li><li><p><strong><code>Data Plane:</code></strong> Comprises transparent proxies running as sidecar containers within pods. These proxies automatically manage the interception of pod&#39;s TCP traffic, implementing transparent encryption (mTLS), Layer-7 load balancing, routing, retries, telemetry, and more.</p></li><li><p><strong><code>Observability Plane:</code></strong> Integrates Linkerd with the cluster&#39;s observability framework.</p><ul><li><p>Metrics from Linkerd&#39;s control and data plane components are made available for Prometheus scraping, while logs can be integrated into Loki for aggregation.</p></li><li><p>The user-plane component (<strong><code>linkerd-proxy</code></strong>) can be configured to emit traces to the cluster&#39;s tracing backend, Grafana Tempo, requiring the installation of the Linkerd-jaeger extension.</p></li><li><p>The <strong><code>Linkerd-viz</code></strong> component enhances observability with a web dashboard for the service mesh and pre-configured Grafana dashboards.</p></li></ul></li></ul><h2 id="automated-mtls-and-integration-with-cert-manager" tabindex="-1">Automated mTLS and Integration with Cert-Manager <a class="header-anchor" href="#automated-mtls-and-integration-with-cert-manager" aria-label="Permalink to &quot;Automated mTLS and Integration with Cert-Manager&quot;">​</a></h2><p>Linkerd simplifies security by automatically enabling <strong><code>mutual Transport Layer Security</code></strong> (mTLS) for all TCP traffic between meshed pods, ensuring encrypted and authenticated communication by default.</p><p>Within the control plane, Linkerd houses a certificate authority (CA) known as <strong><code>identity</code></strong>, which issues TLS certificates to each data plane proxy. These certificates, which expire after 24 hours, facilitate the encryption and authentication of TCP traffic among proxies and are automatically renewed.</p><p>For the control plane, Linkerd maintains essential credentials: a <strong><code>trust anchor</code></strong>, and an <strong><code>issuer certificate and key</code></strong>. While the TLS certificates for data plane proxies are rotated every 24 hours by Linkerd, the issuer&#39;s credentials and key do not undergo automatic rotation. Here, cert-manager plays a crucial role, generating and rotating the issuer&#39;s certificate and key, and establishing the <strong><code>trust anchor</code></strong> (root CA) necessary for signing the <strong><code>identity</code></strong> TLS certificate and validating other TLS certificates issued to <strong><code>linkerd-proxy</code></strong> processes.</p><h2 id="installing-linkerd-with-automated-tls-credential-rotation" tabindex="-1">Installing Linkerd with Automated TLS Credential Rotation <a class="header-anchor" href="#installing-linkerd-with-automated-tls-credential-rotation" aria-label="Permalink to &quot;Installing Linkerd with Automated TLS Credential Rotation&quot;">​</a></h2><p>This guide outlines the process for setting up Linkerd with automatic rotation of control-plane TLS credentials, diverging slightly from the approach recommended in the <a href="https://linkerd.io/2.12/tasks/automatically-rotating-control-plane-tls-credentials/" target="_blank" rel="noreferrer"><strong><code>official Linkerd documentation</code></strong></a> by leveraging an existing root CA and CA ClusterIssuer from Cert-manager installation for the cluster.</p><h2 id="configuring-hashicorp-vault-with-a-custom-configuration-and-systemd-service" tabindex="-1">Configuring HashiCorp Vault with a Custom Configuration and Systemd Service <a class="header-anchor" href="#configuring-hashicorp-vault-with-a-custom-configuration-and-systemd-service" aria-label="Permalink to &quot;Configuring HashiCorp Vault with a Custom Configuration and Systemd Service&quot;">​</a></h2><h3 id="initial-setup-cert-manager-configuration" tabindex="-1">Initial Setup: Cert-Manager Configuration <a class="header-anchor" href="#initial-setup-cert-manager-configuration" aria-label="Permalink to &quot;Initial Setup: Cert-Manager Configuration&quot;">​</a></h3><p>First, ensure Cert-manager is set up to function as an in-cluster Certificate Authority (CA), capable of reissuing Linkerd’s issuer certificate and private key regularly.</p><p>Cert-manager&#39;s CA root certificate (trust-anchor) and CA Cluster issuer should already be in place from the <a href="https://github.com/Crypto-Aggressor/PiKube-Kubernetes-Cluster/blob/production/documentation/2.5-tls-certificates-cert-manager.md" target="_blank" rel="noreferrer"><strong><code>Cert-Manager setup process</code></strong></a>, which will facilitate the generation of Linkerd&#39;s certificate acting as an intermediate CA for mTLS certificate issuance.</p><h3 id="deploying-linkerd-with-helm" tabindex="-1">Deploying Linkerd with Helm <a class="header-anchor" href="#deploying-linkerd-with-helm" aria-label="Permalink to &quot;Deploying Linkerd with Helm&quot;">​</a></h3><blockquote><p>📢 Note</p><p><em>To prepare for Helm-based Installation, note that starting with release 2.12, Linkerd&#39;s installation process via Helm has been updated, necessitating the deployment of two new charts:</em></p><ul><li><strong><code>linkerd-crd</code></strong></li><li><strong><code>linkerd-control-plane</code></strong></li></ul></blockquote><ul><li>Add the Linkerd Helm Repository</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://helm.linkerd.io/stable</span></span></code></pre></div><ul><li>Update Helm Repository</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><ul><li>For the namespace creation, it&#39;s essential to manually create the namespace with specific labels and annotations for the control plane to function correctly, using <strong><code>linkerd-namespace.yaml</code></strong></li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Namespace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    linkerd.io/inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">disabled</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  labels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    linkerd.io/is-control-plane</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    config.linkerd.io/admission-webhooks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">disabled</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    linkerd.io/control-plane-ns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd</span></span></code></pre></div><ul><li>Apply the manifest</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-namespace.yaml</span></span></code></pre></div><ul><li>Configure <strong><code>Linkerd Identity Issuer Certificate</code></strong> by creating <strong><code>linkerd-identity-issuer.yaml</code></strong> detailing the certificate specifications, using the <strong><code>ca-issuer</code></strong> for signing</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cert-manager.io/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Certificate</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-identity-issuer</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  secretName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-identity-issuer</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">48h</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  renewBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">25h</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  issuerRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">picluster-ca-issuer</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ClusterIssuer</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cert-manager.io</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  commonName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">identity.linkerd.cluster.local</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  dnsNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">identity.linkerd.cluster.local</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  isCA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  privateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ECDSA</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  usages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cert sign</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">crl sign</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">server auth</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">client auth</span></span></code></pre></div><ul><li>Apply the Certificate Configuration</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-identity-issuer.yaml</span></span></code></pre></div><ul><li>Retrieve the CA Certificate by extracting the trust-anchor certificate for use in the Linkerd installation</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-identity-issuer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsonpath=&quot;{.data.ca\\.crt}&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca.crt</span></span></code></pre></div><ul><li>Install Linkerd CRDs</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-crds</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd/linkerd-crds</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd</span></span></code></pre></div><ul><li>Deploy Linkerd Control Plane</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-control-plane</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--set-file </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">identityTrustAnchorsPEM=ca.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">identity.issuer.scheme=kubernetes.io/tls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">installNamespace=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">linkerd/linkerd-control-plane </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-n </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd</span></span></code></pre></div><ul><li>Verify Deployment Success</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd</span></span></code></pre></div><ul><li>Inspect Linkerd Control Plane ConfigMap and ensure the <strong><code>ca.crt</code></strong> is correctly incorporated in the configmap</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configmap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd</span></span></code></pre></div><h4 id="alternative-installation-via-gitops-argocd" tabindex="-1">Alternative Installation via GitOps (ArgoCD) <a class="header-anchor" href="#alternative-installation-via-gitops-argocd" aria-label="Permalink to &quot;Alternative Installation via GitOps (ArgoCD)&quot;">​</a></h4><p>For GitOps deployments, such as with ArgoCD, it&#39;s advisable to manage the CA certificate through an external ConfigMap, <strong><code>linkerd-identity-trust-roots</code></strong>, instead of embedding it directly in the Helm chart values. If using an external ConfigMap, set <strong><code>identity.externalCA=true</code></strong> during installation.</p><p>The <a href="https://cert-manager.io/docs/trust/trust-manager/" target="_blank" rel="noreferrer"><strong><code>Trust Manager</code></strong></a>, part of the Cert-Manager ecosystem, can automate this process, creating the necessary ConfigMap with the CA certificate. Detailed guidance is available in the <a href="https://github.com/linkerd/linkerd2/issues/7345#issuecomment-979207861" target="_blank" rel="noreferrer"><strong><code>Linkerd GitHub discussion #7345</code></strong></a> and the <a href="https://github.com/Crypto-Aggressor/PiKube-Kubernetes-Cluster/blob/production/documentation/2.5-tls-certificates-cert-manager.md" target="_blank" rel="noreferrer"><strong><code>TLS certification management documentation</code></strong></a>.</p><ul><li>Replace the below step</li></ul><blockquote><ul><li>Retrieve the CA Certificate by extracting the trust-anchor certificate for use in the Linkerd installation</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-identity-issuer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsonpath=&quot;{.data.ca\\.crt}&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca.crt</span></span></code></pre></div></blockquote><p>with this alternative step to set up a <strong><code>Trust-Manager Bundle</code></strong> resource to share <strong><code>ca.crt</code></strong> stored in <strong><code>root-secret</code></strong> within a configMap (<strong><code>argocd-linkerd-identity-trust-roots.yaml</code></strong>) in linkerd namespace.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">trust.cert-manager.io/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Bundle</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-identity-trust-roots</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  sources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root-secret&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ca.crt&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    configMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ca-bundle.crt&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    namespaceSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      matchLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        kubernetes.io/metadata.name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd</span></span></code></pre></div><ul><li>Apply the manifest</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> argocd-linkerd-identity-trust-roots.yaml</span></span></code></pre></div><ul><li>Also replace the below step</li></ul><blockquote><ul><li>Deploy Linkerd Control Plane</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-control-plane</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--set-file </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">identityTrustAnchorsPEM=ca.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">identity.issuer.scheme=kubernetes.io/tls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">installNamespace=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">linkerd/linkerd-control-plane </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-n </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd</span></span></code></pre></div></blockquote><ul><li>With a Linkerd control plane is deployed with the <strong><code>identity.externalCA=true</code></strong> setting, indicating that an external CA is used for identity issuance</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-control-plane</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">identity.externalCA=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">identity.issuer.scheme=kubernetes.io/tls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--set </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">installNamespace=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">linkerd/linkerd-control-plane </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-n </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd</span></span></code></pre></div><h3 id="integrating-the-linkerd-viz-extension" tabindex="-1">Integrating the Linkerd Viz Extension <a class="header-anchor" href="#integrating-the-linkerd-viz-extension" aria-label="Permalink to &quot;Integrating the Linkerd Viz Extension&quot;">​</a></h3><p>The Linkerd Viz extension enriches the Linkerd service mesh with comprehensive metrics, a graphical dashboard, and Grafana integration for in-depth analysis. This add-on deploys several key components into the <strong><code>linkerd-viz</code></strong> namespace, including:</p><ul><li>A dedicated instance of Prometheus.</li><li>The <strong><code>metrics-api</code></strong>, <strong><code>tap</code></strong>, <strong><code>tap-injector</code></strong>, and <strong><code>web</code></strong> services.</li></ul><p>Given an existing monitoring setup detailed in the <a href="https://github.com/Crypto-Aggressor/PiKube-Kubernetes-Cluster/blob/production/documentation/4.1-monitoring-prometheus.md" target="_blank" rel="noreferrer"><strong><code>Prometheus integration guide</code></strong></a>, this guide will adjust the Viz extension to utilize an already deployed Prometheus and Grafana instance, aligning with the <a href="https://linkerd.io/2.12/tasks/external-prometheus/" target="_blank" rel="noreferrer"><strong><code>Linkerd guide on integrating an external Prometheus</code></strong></a>.</p><p>The web interface for Linkerd Viz, accessible through an Ingress resource, requires specific configurations to function correctly, especially considering DNS rebinding protections and the absence of the Grafana component in releases starting from 2.12.</p><ul><li>Initially, create the <strong><code>linkerd-viz</code></strong> namespace with essential annotations and labels to ensure proper service mesh integration and configuration using <strong><code>linkerd-viz-namespace.yaml</code></strong></li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Namespace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-viz</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    linkerd.io/inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    config.linkerd.io/proxy-await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;enabled&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  labels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    linkerd.io/extension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">viz</span></span></code></pre></div><ul><li>Apply the manifest</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-viz-namespace.yaml</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Namespace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-viz</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    linkerd.io/inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    config.linkerd.io/proxy-await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;enabled&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  labels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    linkerd.io/extension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">viz</span></span></code></pre></div><ul><li>Adjust the linkerd Viz Helm values to accommodate the existing Prometheus setup and disable the DNS rebinding protection if necessary with <strong><code>linkerd-viz-values.yaml</code></strong></li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skip namespace creation</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># When set to false, Helm will not create the namespace for the Linkerd Viz installation.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This is useful if you want to manage namespace creation separately or if the namespace already exists.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">installNamespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Prometheus configuration</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">prometheus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Disable the Prometheus installation that comes with the Linkerd Viz extension.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # This is useful if you already have a Prometheus instance in your cluster and wish to use that for collecting metrics.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Specify the URL of an external Prometheus instance.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This setting is necessary when you&#39;ve disabled the bundled Prometheus as it directs the Linkerd Viz components to the correct Prometheus instance for fetching metrics.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The example URL points to a Prometheus instance deployed in the &quot;monitoring&quot; namespace, accessible within the cluster.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">prometheusUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Grafana configuration</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grafana</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Specify the URL of an external Grafana instance.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # When using an existing Grafana setup, this URL allows Linkerd Viz to integrate with it for visualizing metrics.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # The example URL points to a Grafana service deployed in the &quot;monitoring&quot; namespace.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://kube-prometheus-stack-grafana.monitoring.svc.cluster.local</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Disabling DNS rebinding protection (specific to installations using Traefik as ingress)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The dashboard configuration allows specifying host enforcement policies for accessing the Linkerd dashboard through an ingress.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uncommenting the below lines and setting \`enforcedHostRegexp\` to &quot;.*&quot; disables DNS rebinding protection.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This can be necessary in specific scenarios where DNS rebinding checks prevent accessing the dashboard through Traefik.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># dahsboard:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   enforcedHostRegexp: &quot;.*&quot;</span></span></code></pre></div><ul><li>Deploy the Linkerd Viz extension using the prepared values file</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-viz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-viz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-viz-values.yaml</span></span></code></pre></div><ul><li>Define an Ingress rule in <strong><code>linkerd-viz-ingress.yaml</code></strong>, to provide access to the Linkerd Viz dashboard, including configurations for DNS rebinding protection and HTTP basic authentication. NGINX as Ingress controller will is defined as per the <a href="https://linkerd.io/2.13/tasks/exposing-dashboard/#nginx" target="_blank" rel="noreferrer"><strong><code>Linkerd documentation</code></strong></a> and exposes linkerd-viz at <strong><code>linkerd.picluster.quantfinancehub.com</code></strong></li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">networking.k8s.io/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Ingress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-viz-ingress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-viz</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Enable basic authentication for the ingress. This requires users to authenticate using credentials stored in a Kubernetes secret.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    nginx.ingress.kubernetes.io/auth-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">basic</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # The name of the Kubernetes secret that contains the authentication credentials. The secret should be defined in the same namespace as the Nginx ingress controller.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    nginx.ingress.kubernetes.io/auth-secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nginx/basic-auth-secret</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Instructs the Nginx ingress controller to treat the backend service as an upstream entity. This ensures that the original client&#39;s IP address is preserved.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    nginx.ingress.kubernetes.io/service-upstream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Sets the virtual host in the upstream request to the Linkerd Viz service. This is necessary for DNS rebind protection and to ensure requests are properly routed within the cluster.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    nginx.ingress.kubernetes.io/upstream-vhost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$service_name.$namespace.svc.cluster.local:8084</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Additional Nginx configuration to ensure compatibility with Linkerd Viz&#39;s security mechanisms. This includes setting the Origin header to an empty string and hiding specific headers.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    nginx.ingress.kubernetes.io/configuration-snippet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      proxy_set_header Origin &quot;&quot;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      proxy_hide_header l5d-remote-ip;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      proxy_hide_header l5d-server-id;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Annotations for cert-manager to automatically issue and manage an SSL certificate for the Ingress, storing it in a Kubernetes secret.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    cert-manager.io/cluster-issuer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">picluster-ca-issuer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # The common name to be used for the generated SSL certificate, typically matching the domain name.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    cert-manager.io/common-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd.picluster.quantfinancehub.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ingressClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nginx</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  tls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">hosts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd.picluster.quantfinancehub.com</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # The name of the Kubernetes secret where the SSL certificate will be stored.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      secretName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-viz-tls</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd.picluster.quantfinancehub.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            pathType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Prefix</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">              service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">                name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">web</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">                port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">                  number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8084</span></span></code></pre></div><ul><li>Apply the manifest</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-viz-ingress.yaml</span></span></code></pre></div><ul><li>Configure Prometheus to scrape metrics from Linkerd by applying a tailored PodMonitor configuration defined in <strong><code>linkerd-prometheus.yaml</code></strong></li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">monitoring.coreos.com/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PodMonitor</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  labels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Identifies the app as Linkerd for labeling and filtering purposes.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">kube-prometheus-stack</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Associates this monitor with a specific Prometheus operator release.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-controller</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Name of the PodMonitor for the Linkerd controller component.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">monitoring</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Namespace where the PodMonitor resource will be created.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespaceSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    matchNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-viz</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Targets the linkerd-viz namespace for monitoring.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Also targets the linkerd namespace.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    matchLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># An empty selector that matches all pods within the specified namespaces.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  podMetricsEndpoints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">relabelings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_container_port_name</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">keep</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">admin-http</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Only keeps metrics from containers exposing an &#39;admin-http&#39; port, common for Linkerd components.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_container_name</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">replace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        targetLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">component</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Renames the container name label to &#39;component&#39; for clarity.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__address__</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">replace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        targetLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">job</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        replacement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-controller</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Sets the job label to &#39;linkerd-controller&#39;, identifying the source of the metrics.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">monitoring.coreos.com/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PodMonitor</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  labels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">kube-prometheus-stack</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-service-mirror</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Specific monitor for the Linkerd service mirror component.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">monitoring</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespaceSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Indicates that this monitor targets pods across all namespaces.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    matchLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Matches all pods, similar to the previous monitor.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  podMetricsEndpoints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">relabelings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_label_linkerd_io_control_plane_component</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_container_port_name</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">keep</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-service-mirror;admin-http$</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Specifically targets the &#39;linkerd-service-mirror&#39; component exposing &#39;admin-http&#39;.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_container_name</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">replace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        targetLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">component</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source_labels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__address__</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">replace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        targetLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">job</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        replacement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-service-mirror</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Identifies the source of metrics as the Linkerd service mirror.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">monitoring.coreos.com/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PodMonitor</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  labels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">kube-prometheus-stack</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-proxy</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Monitor for the Linkerd proxy sidecars.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">monitoring</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespaceSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Targets all namespaces, as Linkerd proxies are deployed alongside applications in various namespaces.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    matchLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Matches all pods, aiming to discover all Linkerd proxies.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  podMetricsEndpoints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">relabelings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_container_name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_container_port_name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_label_linkerd_io_control_plane_ns</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">keep</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">^linkerd-proxy;linkerd-admin;linkerd$</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Filters for the Linkerd proxy containers specifically.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">replace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        targetLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">namespace</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Sets the namespace label for better identification.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">replace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        targetLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pod</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Sets the pod label.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_label_linkerd_io_proxy_job</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">replace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        targetLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">k8s_job</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Optional labeling for job identification, can be customized or removed based on needs.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">labeldrop</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_label_linkerd_io_proxy_job</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Drops temporary labels to clean up.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">labelmap</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_label_linkerd_io_proxy_(.+)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Maps Linkerd proxy labels for Prometheus.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">labeldrop</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_label_linkerd_io_proxy_(.+)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">labelmap</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_label_linkerd_io_(.+)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">labelmap</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__meta_kubernetes_pod_label_(.+)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        replacement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__tmp_pod_label_$1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Temporary label mapping for further processing.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">labelmap</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__tmp_pod_label_linkerd_io_(.+)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        replacement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__tmp_pod_label_$1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">labeldrop</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__tmp_pod_label_linkerd_io_(.+)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">labelmap</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__tmp_pod_label_(.+)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__address__</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">replace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        targetLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">job</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        replacement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd-proxy</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Finalizes the job label as &#39;linkerd-proxy&#39; for the metrics collected from Linkerd proxies.</span></span></code></pre></div><ul><li>Apply the manifest</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-prometheus.yaml</span></span></code></pre></div><blockquote><p>📢 Note</p><p><em>The configuration outlined above adapts the <a href="https://linkerd.io/2.12/tasks/external-prometheus/#prometheus-scrape-configuration" target="_blank" rel="noreferrer"><strong><code>Prometheus scrape settings specified in the Linkerd documentation</code></strong></a> for use with the Prometheus Operator framework, utilizing <strong><code>ServiceMonitor</code></strong> and <strong><code>PodMonitor</code></strong> Custom Resource Definitions (CRDs).</em></p><p><em>Two key modifications have been applied to the original setup:</em></p><ul><li><p><em><strong>Job Label Adjustment</strong>: The Prometheus Operator automatically generates job names and labels following the pattern <strong><code>&lt;namespace&gt;/&lt;podMonitor/serviceMonitor_name&gt;</code></strong>. To align with the Grafana dashboard&#39;s expectations, we&#39;ve introduced an additional relabeling rule. This rule strips the namespace portion from the job label to ensure compatibility with Grafana&#39;s filtering logic.</em></p></li><li><p><em><strong>Scrape Interval and Timeout Settings</strong>: Originally set to 10 seconds in the Linkerd documentation, these settings have been omitted to fall back on Prometheus&#39;s default values of 30 seconds. This change aims to lessen the resource usage on memory and CPU by decreasing the frequency of scrape operations.</em></p></li></ul></blockquote><ul><li>For Grafana Dashboard Integration, import Linkerd&#39;s Grafana dashboards from the <a href="https://github.com/linkerd/linkerd2/tree/main/grafana/dashboards" target="_blank" rel="noreferrer"><strong><code>official repository</code></strong></a> and follow the <a href="https://github.com/Crypto-Aggressor/PiKube-Kubernetes-Cluster/blob/production/documentation/4.1-monitoring-prometheus.md" target="_blank" rel="noreferrer"><strong><code>guide for automatic dashboard provisioning</code></strong></a>.</li></ul><h3 id="installing-the-linkerd-jaeger-extension-for-distributed-tracing" tabindex="-1">Installing the Linkerd Jaeger Extension for Distributed Tracing <a class="header-anchor" href="#installing-the-linkerd-jaeger-extension-for-distributed-tracing" aria-label="Permalink to &quot;Installing the Linkerd Jaeger Extension for Distributed Tracing&quot;">​</a></h3><p>The <a href="https://linkerd.io/2.12/tasks/distributed-tracing/" target="_blank" rel="noreferrer"><strong><code>Linkerd Jaeger extension</code></strong></a> equips Linkerd with the capability to generate span traces from its proxies, enhancing observability through distributed tracing.</p><p>By default, the Linkerd Jaeger extension installs several components:</p><ul><li><strong>Jaeger</strong>: Serves as the backend for trace data.</li><li><a href="https://opentelemetry.io/docs/collector/" target="_blank" rel="noreferrer"><strong>OpenTelemetry Collector</strong></a>: Gathers and routes traces to the Jaeger backend.</li><li><strong>Jaeger Injector</strong>: Modifies Linkerd proxies to generate span traces.</li></ul><p>TODO-add url for the below linked once documentation done</p><p>Within the context of the <a href="./../9-monitoring/2-observability-framework.html"><strong><code>PiKube Kubernetes Service</code></strong></a> Observability Platform, Tempo is preferred over Jaeger for trace data management, detailed in the <a href="./../9-monitoring/8-distributed-tracing-tempo.html"><strong><code>Tempo Installation Guide</code></strong></a>. Given that Tempo incorporates an OpenTelemetry collector within its distributor component, the standard Jaeger and OpenTelemetry Collector installations are unnecessary, leaving only the Jaeger Injector to be deployed.</p><blockquote><p>📢 Note</p><p><em>Ensure Tempo is integrated with Linkerd prior to proceeding with the Linkerd Jaeger extension setup outlined below.</em></p></blockquote><ul><li>To start Jaeger configuration and installation, create <strong><code>linkerd-jaeger-values.yaml</code></strong> configuration file with the following content to exclude Jaeger and the OpenTelemetry Collector while directing the Jaeger Injector towards Tempo&#39;s distributor for trace collection</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">collector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jaeger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">webhook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  collectorSvcAddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tempo-distributor.tracing:55678</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  collectorSvcAccount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tempo</span></span></code></pre></div><p>where <strong><code>webhook.collectorSvcAddr:</code></strong> specifies the endpoint for the OpenCensus receiver at the Tempo distributor and <strong><code>webhook.collectorSvcAccount:</code></strong> defines the service account associated with Tempo.</p><ul><li>Deploy the Linkerd Jaeger extension, focusing solely on the Jaeger Injector component</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-jaeger</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-jaeger</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --create-namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd/linkerd-jaeger</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd-jaeger-values.yaml</span></span></code></pre></div><h2 id="integrating-services-with-linkerd" tabindex="-1">Integrating Services with Linkerd <a class="header-anchor" href="#integrating-services-with-linkerd" aria-label="Permalink to &quot;Integrating Services with Linkerd&quot;">​</a></h2><p>Integrating services with Linkerd can be accomplished through two primary methods, allowing for the automatic injection of the linkerd-proxy into your Kubernetes resources:</p><p><strong>Direct Integration:</strong></p><ul><li><strong>Per Resource Annotation:</strong> Directly annotate individual Kubernetes resources (Deployments, DaemonSets, StatefulSets) with <strong><code>linkerd.io/inject: enabled</code></strong> to enable proxy injection.</li></ul><p>To automate annotation injection, use the <strong><code>linkerd CLI</code></strong> as follows, replacing <strong><code>NAMESPACE</code></strong> with the wanted namespace:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NAMESPACE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy/daemonset/statefulset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yaml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linkerd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inject</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span></code></pre></div><p>This command processes all specified resources in the namespace, enabling automatic proxy injection.</p><p>Alternatively, resources can be manually annotated using kubectl patch:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment/daemonset/statefulset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">spec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">template</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">metadata</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">annotations</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd.io/inject</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}}}}}&quot;</span></span></code></pre></div><p>After executing either method, the resources are updated to include the <strong><code>linkerd-proxy</code></strong>.</p><p><strong>Namespace-Level Integration:</strong></p><ul><li><strong>Namespace Annotation:</strong> Annotating a namespace with <strong><code>linkerd.io/inject: enabled</code></strong> ensures that all new pods within the namespace are automatically injected with the <strong><code>linkerd-proxy</code></strong>.</li></ul><p>This can be done using:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ns</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">namespace_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd.io/inject=enabled</span></span></code></pre></div><p>Or through the namespace&#39;s manifest</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Namespace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    linkerd.io/inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled</span></span></code></pre></div><h3 id="handling-kubernetes-jobs-with-linkerd" tabindex="-1">Handling Kubernetes Jobs with Linkerd <a class="header-anchor" href="#handling-kubernetes-jobs-with-linkerd" aria-label="Permalink to &quot;Handling Kubernetes Jobs with Linkerd&quot;">​</a></h3><p>When a namespace is annotated with <strong><code>linkerd.io/inject: enabled</code></strong>, <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/" target="_blank" rel="noreferrer"><strong><code>Kubernetes Jobs</code></strong></a> within that namespace may not terminate as expected. This is because the <strong><code>linkerd-proxy</code></strong> injected into the Job&#39;s pods remains active. This can particularly affect Helm chart installations that deploy Jobs or the execution of scheduled CronJobs.</p><p>To address this, consider the following strategies:</p><ul><li><strong>Exclude Jobs from Mesh:</strong> Specifically disable proxy injection for Job resources by annotating the Job&#39;s template:</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          linkerd.io/inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">disabled</span></span></code></pre></div><ul><li><strong>Automated Proxy Shutdown:</strong> Utilize <a href="https://github.com/linkerd/linkerd-await" target="_blank" rel="noreferrer"><strong><code>linkerd-await</code></strong></a> to manage the lifecycle of the <strong><code>linkerd-proxy</code></strong> in conjunction with the Job. <strong><code>linkerd-await</code></strong> ensures the proxy is only shut down after the main Job command completes, maintaining the expected lifecycle of Job resources.</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">linkerd-await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shutdown</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">job_comman</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>For more detailed implementations and considerations, refer to the strategies outlined in the <a href="https://itnext.io/three-ways-to-use-linkerd-with-kubernetes-jobs-c12ccc6d4c7c" target="_blank" rel="noreferrer"><strong><code>ITNEXT blog post</code></strong></a>, which discusses handling Kubernetes Jobs within meshed environments.</p><h2 id="integrating-cluster-services-with-linkerd" tabindex="-1">Integrating Cluster Services with Linkerd <a class="header-anchor" href="#integrating-cluster-services-with-linkerd" aria-label="Permalink to &quot;Integrating Cluster Services with Linkerd&quot;">​</a></h2><h3 id="incorporating-longhorn-into-the-service-mesh" tabindex="-1">Incorporating Longhorn into the Service Mesh <a class="header-anchor" href="#incorporating-longhorn-into-the-service-mesh" aria-label="Permalink to &quot;Incorporating Longhorn into the Service Mesh&quot;">​</a></h3><p>Integrating services into a service mesh like Linkerd typically involves two approaches: explicitly annotating individual resources or implicitly annotating an entire namespace. However, when it comes to Longhorn, a cloud-native distributed storage platform for Kubernetes, certain considerations must be made due to its architecture and the nature of its components.</p><p>Longhorn operates by creating a variety of Kubernetes workloads, including daemonsets, deployments, and jobs. The challenge arises because not all of these components can be easily annotated through Longhorn&#39;s Helm chart customization options. Specifically, while the <strong><code>longhorn-manager</code></strong> DaemonSet can be customized through the Helm chart, other components managed by it, such as instance managers and jobs, cannot. This limitation is highlighted in an existing feature request within the Longhorn project (see Longhorn <a href="https://github.com/longhorn/longhorn/issues/3286" target="_blank" rel="noreferrer"><strong><code>issue #3286</code></strong></a>).</p><p><strong>Considerations for Longhorn&#39;s Data Plane:</strong></p><p>To ensure optimal performance of Longhorn&#39;s data plane, it is recommended to avoid meshing certain components, specifically <strong><code>longhorn-engine</code></strong> and <strong><code>longhorn-replica</code></strong>. Meshing these components with Linkerd could potentially impact read/write operations due to the overhead introduced by mutual TLS (mTLS) encryption.</p><p>Therefore, the focus is primarily on meshing Longhorn&#39;s control plane components, such as the <strong><code>longhorn-manager</code></strong> (including its CSI plugin) and the UI component (<strong><code>longhorn-ui</code></strong>), while keeping the data plane components out of the mesh.</p><p><strong>Challenges with Namespace-Level Annotations:</strong></p><p>Applying a namespace-level annotation for automatic mesh injection or explicitly annotating only the <strong><code>longhorn-manager</code></strong> daemon set can lead to deployment issues. One notable challenge is that the <strong><code>longhorn-manager</code></strong> does not accept connections from localhost, which conflicts with how Linkerd&#39;s proxy handles traffic routing. This issue stems from Linkerd&#39;s iptables forwarding rules, which cause all incoming traffic to appear as if it&#39;s originating from localhost. As a workaround, containers meshed with Linkerd need to listen on &quot;0.0.0.0&quot; to accept traffic from any IP address, including localhost.</p><p><strong>Workarounds and Solutions:</strong></p><p>To mesh <strong><code>longhorn-manager</code></strong> successfully, the following steps can be taken after Longhorn is fully deployed:</p><ul><li>Modify the <strong><code>POD_IP</code></strong> environment variable to &quot;0.0.0.0&quot; in the <code>**</code>longhorn-manager<code>**</code> DaemonSet, allowing the container to listen for connections from localhost</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemonset/longhorn-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> longhorn-system</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POD_IP=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0.0.0</span></span></code></pre></div><ul><li>Explicitly annotate the <strong><code>longhorn-manager</code></strong> DaemonSet to inject the Linkerd proxy</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemonset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> longhorn-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> longhorn-system</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --patch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">spec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">template</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">metadata</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">annotations</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd.io/inject</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}}}}}&quot;</span></span></code></pre></div><ul><li>Similarly, annotate the <strong><code>longhorn-ui</code></strong> deployment for Linkerd proxy injection</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> longhorn-ui</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> longhorn-system</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --patch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">spec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">template</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">metadata</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">annotations</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linkerd.io/inject</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}}}}}&quot;</span></span></code></pre></div><p><a id="configuring-the-prometheus-stack-with-linkerd"></a></p><h3 id="configuring-the-prometheus-stack-with-linkerd" tabindex="-1">Configuring the Prometheus Stack with Linkerd <a class="header-anchor" href="#configuring-the-prometheus-stack-with-linkerd" aria-label="Permalink to &quot;Configuring the Prometheus Stack with Linkerd&quot;">​</a></h3><p>Integrating Prometheus Stack services with the Linkerd service mesh involves strategic considerations to ensure compatibility and optimal functioning. This section outlines the necessary steps and considerations for successfully deploying the <strong><code>kube-prometheus-stack</code></strong> with Linkerd.</p><p><strong>Initial Namespace Annotation</strong>:</p><p>Before installing the kube-prometheus-stack chart, it&#39;s advisable to enable Linkerd injection at the namespace level. This approach simplifies the mesh integration process for multiple components within the namespace.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> monitoring</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd.io/inject=enabled</span></span></code></pre></div><p><strong>Handling the Prometheus Operator Deployment Issue:</strong></p><p>Deploying the kube-prometheus-stack with an annotated namespace for Linkerd injection can lead to a known issue where the Prometheus Operator does not proceed as expected. Specifically, the job pod <strong><code>pod/kube-prometheus-stack-admission-create-&lt;randomAlphanumericString&gt;</code></strong> may remain in a <strong><code>NotReady</code></strong> state indefinitely. This occurs because the Linkerd proxy remains active even after the job container has completed, preventing the job pod from successfully concluding.</p><p>This problem is documented in a <a href="https://github.com/prometheus-community/helm-charts/issues/479" target="_blank" rel="noreferrer"><strong><code>discussion regarding the Prometheus Operator and Linkerd</code></strong></a>.</p><p><strong>Solution: Disabling Linkerd Injection for Specific Jobs:</strong></p><p>To circumvent this issue, Linkerd injection for the jobs created by the Prometheus Operator must be explicitly disabled. This can be accomplished by modifying the <strong><code>prometheus-values.yaml</code></strong> file used during the helm chart deployment, as shown below:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">prometheusOperator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  admissionWebhooks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      podAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        linkerd.io/inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">disabled</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # The existing prometheusOperator configuration continues below...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  serviceMonitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    relabelings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__address__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">replace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        targetLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">job</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        replacement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">prometheus-operator</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  kubeletService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The rest of the configuration follows...</span></span></code></pre></div><ul><li>Apply the manifest</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-prometheus-stack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prometheus-community/kube-prometheus-stack</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prometeus-values.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> monitoring</span></span></code></pre></div><p>Integrating this adjustment ensures that the Prometheus Operator jobs proceed without hindrance, facilitating a smooth deployment process for the <strong><code>kube-prometheus-stack</code></strong> within a Linkerd-enabled namespace.</p><blockquote><p>📢 Note</p><p><em><strong>Consideration for node-exporter DaemonSet:</strong></em></p><p><em>It&#39;s important to note that the <strong><code>node-exporter</code></strong> DaemonSet, included within the kube-prometheus-stack, does not receive the Linkerd proxy injection. This is because its pods are configured to use the host&#39;s network namespace (<strong><code>spec.hostNetwork=true</code></strong>), and Linkerd&#39;s injection mechanism is automatically disabled for such configurations.</em></p><p>Attempting manual injection will result in an error, highlighting this limitation:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/pi/.kube/config.yamlget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemonset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> monitoring</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yaml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linkerd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inject</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> transforming</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resources:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inject</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemonset/kube-prometheus-stack-prometheus-node-exporter:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hostNetwork</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enabled</span></span></code></pre></div></blockquote><h3 id="integrating-linkerd-service-mesh-with-efk" tabindex="-1">Integrating Linkerd Service Mesh with EFK <a class="header-anchor" href="#integrating-linkerd-service-mesh-with-efk" aria-label="Permalink to &quot;Integrating Linkerd Service Mesh with EFK&quot;">​</a></h3><p>To incorporate Linkerd service mesh into the EFK (Elasticsearch, Fluentd, and Kibana) services, one effective strategy is to utilize implicit namespace-level annotations before deploying critical components. This preparation step ensures that the service mesh is applied uniformly across the services, enhancing their operation within the mesh.</p><p>Before the installation of the ECK Operator and the setup of Elasticsearch and Kibana services, as well as prior to the deployment of the Fluentd chart, it&#39;s recommended to annotate the target namespace with Linkerd injection enabled. This is also advised as a prerequisite adjustment in the EFK installation guidelines.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logging</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkerd.io/inject=enabled</span></span></code></pre></div><p>For Elasticsearch and Kibana deployments via the ECK operator, it&#39;s crucial to enable the <strong><code>automountServiceAccountToken</code></strong> parameter. Without this setting, Linkerd&#39;s proxy injection might not occur, potentially impacting the service mesh&#39;s functionality.</p><p>Include the following snippet in the configuration, <strong><code>elasticsearch-values.yaml</code></strong>, for both Elasticsearch and Kibana resources to ensure proper service mesh injection:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">elasticsearch.k8s.elastic.co/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Elasticsearch</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">efk</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">logging</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.1.2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  nodeSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Single-node Elasticsearch cluster</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        node.store.allow_mmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Disable memory mapping</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      podTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          automountServiceAccountToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Ensures Linkerd proxy injection</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The rest of the configuration follows...</span></span></code></pre></div><p>For comprehensive insights into integrating ECK operator-managed Elastic stack components with Linkerd, refer to the <a href="https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-service-mesh-linkerd.html" target="_blank" rel="noreferrer"><strong><code>ECK and Linkerd integration guide</code></strong></a>.</p><blockquote><p>📢 Note</p><p><em>The automatic TLS configuration previously enabled for Elasticsearch has been deactivated. This change permits Linkerd to capture more detailed metrics on connections, addressing specific issues.</em></p></blockquote><h3 id="linkerd-integration-with-velero" tabindex="-1">Linkerd Integration with Velero <a class="header-anchor" href="#linkerd-integration-with-velero" aria-label="Permalink to &quot;Linkerd Integration with Velero&quot;">​</a></h3><p>Applying Linkerd service mesh enhancements to Velero operations involves a straightforward annotation process for both the <strong><code>Velero</code></strong> deployment and the <strong><code>Restic</code></strong> daemonset. These annotations ensure that Velero components are mesh-aware, optimizing their performance and monitoring within the service mesh environment.</p><p>When installing Velero using its Helm chart, automatically apply the necessary annotations by incorporating them into the <strong><code>velero-values.yaml</code></strong> file. This approach ensures that the Linkerd proxy is injected into the Velero pods, aligning with the service mesh&#39;s security and observability features.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># AWS backend and CSI plugins configuration</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">initContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">velero-plugin-for-aws</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">velero/velero-plugin-for-aws:v1.8.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    imagePullPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">IfNotPresent</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumeMounts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mountPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/target</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">plugins</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">velero-plugin-for-csi</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">velero/velero-plugin-for-csi:v0.6.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    imagePullPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">IfNotPresent</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumeMounts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mountPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/target</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">plugins</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Minio storage configuration</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  backupStorageLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">aws</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    bucket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;velero_bucket&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    caCert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;ca.pem_base64&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Example: cat CA.pem | base64 | tr -d &quot;\\n&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      region</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">eu-west-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      s3ForcePathStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      s3Url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://minio.example.com:9091</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      insecureSkipTLSVerify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  features</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EnableCSI</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Enable CSI snapshot support</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">credentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  secretContents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    cloud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      [default]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      aws_access_key_id: &lt;minio_velero_user&gt;  # Not encoded</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      aws_secret_access_key: &lt;minio_velero_pass&gt;  # Not encoded</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Disable VolumeSnapshotLocation CRD as it is not needed for CSI integration</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">snapshotsEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Pod annotations to ensure automountServiceAccountToken is enabled</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">podAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  linkerd.io/inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">podTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Additional configuration for Velero to ensure compatibility with Linkerd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    automountServiceAccountToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>This configuration ensures that Velero services are seamlessly integrated with Linkerd, benefiting from the mesh&#39;s advanced networking, security, and observability capabilities.</p><h2 id="setting-up-ingress-with-linkerd" tabindex="-1">Setting Up Ingress with Linkerd <a class="header-anchor" href="#setting-up-ingress-with-linkerd" aria-label="Permalink to &quot;Setting Up Ingress with Linkerd&quot;">​</a></h2><p>Linkerd, while not shipping with its own Ingress Controller, is designed to work seamlessly with existing Ingress Controllers. Integrating an Ingress Controller with Linkerd involves two primary steps:</p><ul><li>Adjusting the Ingress Controller&#39;s configuration to be compatible with Linkerd.</li><li>Enabling Linkerd&#39;s proxy injection on Ingress Controller pods to equip them with Linkerd&#39;s capabilities.</li></ul><p>Linkerd is compatible with any Ingress Controller. To leverage Linkerd&#39;s advanced features like route-based metrics and traffic splitting, it&#39;s crucial that Ingress Controllers forward traffic to the IP/port of Kubernetes Services, not directly to Pods. Many Ingress Controllers, including Traefik and NGINX, default to their own load balancing, bypassing the Service layer.</p><p>To utilize Linkerd&#39;s load balancing for HTTP traffic, the Ingress Controller&#39;s default load balancing must be bypassed.</p><p>For comprehensive instructions, refer to <a href="https://linkerd.io/2.13/tasks/using-ingress/" target="_blank" rel="noreferrer"><strong><code>Linkerd&#39;s &quot;Ingress Traffic&quot; documentation</code></strong></a>.</p><h3 id="integrating-traefik-with-linkerd" tabindex="-1">Integrating Traefik with Linkerd <a class="header-anchor" href="#integrating-traefik-with-linkerd" aria-label="Permalink to &quot;Integrating Traefik with Linkerd&quot;">​</a></h3><p>To mesh Traefik with Linkerd:</p><ul><li><strong>Enabling Ingress Mode on Traefik:</strong> Mesh Traefik with <strong><code>ingress mode</code></strong> by using the <strong><code>linkerd.io/inject: ingress</code></strong> annotation. This directs traffic routing to Linkerd&#39;s proxy in ingress mode</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> traefik</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-system</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linkerd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inject</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ingress</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span></code></pre></div><blockquote><p>⚠️ Important Consideration</p><p><em>In ingress mode, Linkerd&#39;s proxy handles only HTTP traffic. Traefik will no longer manage HTTPS traffic, which means TLS termination must be configured to occur at Traefik for external traffic, with internal service communication happening over HTTP. This setup relies on Linkerd to secure internal traffic.</em></p></blockquote><ul><li>To maintain Traefik&#39;s functionality (given it must access the Kubernetes API over HTTPS), exclude outbound port 443 from Linkerd&#39;s proxy</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig=/home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> traefik</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-system</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linkerd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inject</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ingress</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --skip-outbound-ports</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 443</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span></code></pre></div><ul><li>Alternatively, configure Traefik&#39;s Helm chart to include the necessary annotations for ingress mode and skipping port 443</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">deployment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  additionalContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">stream-accesslog</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">busybox</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/bin/sh&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-c&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tail -n+1 -F /data/access.log&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      imagePullPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      terminationMessagePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/termination-log</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      terminationMessagePolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">File</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      volumeMounts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mountPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/data</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">data</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  podAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    linkerd.io/inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ingress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    config.linkerd.io/skip-outbound-ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;443&quot;</span></span></code></pre></div><ul><li>Upgrade Traefik if needed</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> traefik</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> traefik/traefik</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> traefik-values.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> traefik</span></span></code></pre></div><p>For more details on this configuration, see <a href="https://github.com/linkerd/linkerd2/discussions/7387" target="_blank" rel="noreferrer"><strong><code>Linkerd discussion #7387</code></strong></a> and the official documentation for <a href="https://docs.k3s.io/helm#customizing-packaged-components-with-helmchartconfig" target="_blank" rel="noreferrer"><strong><code>configuring Traefik</code></strong></a>.</p><ul><li><p><strong>Replacing Traefik’s Load Balancing with Linkerd&#39;s</strong>: Configure Traefik to insert the <strong><code>l5d-dst-override</code></strong> header, directing traffic to the Service IP/port</p><ul><li><strong>Middleware Configuration</strong>: Create a Middleware manifest, <strong><code>traefik-linkerd-ingress.yaml</code></strong>, to add the <strong><code>l5d-dst-override</code></strong> header</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">traefik.containo.us/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Middleware</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">l5d-header-middleware</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">traefik</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    customRequestHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      l5d-dst-override</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-service.traefik.svc.cluster.local:80&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # my-service is a placeholder, ensure the service name is correctly specified</span></span></code></pre></div><ul><li><strong>Ingress Configuration</strong>: Apply the Middleware to the Traefik Ingress resources in <strong><code>traefik-ingress.yaml</code></strong> through annotations</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">networking.k8s.io/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Ingress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">traefik-ingress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">traefik</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    traefik.ingress.kubernetes.io/router.middlewares</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">traefik-basic-auth@kubernetescrd,traefik-l5d-header-middleware@kubernetescrd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Traefik Ingress spec here</span></span></code></pre></div><ul><li>Update the Traefik Ingress resources</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> traefik-ingress.yaml</span></span></code></pre></div><ul><li>Verify the application of middleware</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> describe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ingress</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-ingress</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> traefik</span></span></code></pre></div></li></ul><blockquote><p>📢 Note</p><p><em>Since Traefik terminates TLS, traffic from outside the cluster is considered opaque TCP streams by Linkerd, offering limited metrics. However, internal HTTP or gRPC traffic benefits from full metrics and mTLS support provided by Linkerd.</em></p></blockquote><h3 id="integrating-nginx-ingress-with-linkerd" tabindex="-1">Integrating NGINX Ingress with Linkerd <a class="header-anchor" href="#integrating-nginx-ingress-with-linkerd" aria-label="Permalink to &quot;Integrating NGINX Ingress with Linkerd&quot;">​</a></h3><p>The process of incorporating NGINX Ingress with Linkerd is straightforward and does not necessitate specific annotations for ingress mode. This guide outlines the necessary steps to ensure NGINX Ingress works seamlessly with Linkerd.</p><p><strong>Annotating NGINX Ingress for Linkerd Integration:</strong></p><p>To enable Linkerd integration, the NGINX Ingress controller needs to be meshed using the <strong><code>linkerd.io/inject: enabled</code></strong> annotation. This approach is more straightforward compared to meshing Traefik, as it doesn&#39;t require any special ingress mode annotations.</p><p>When deploying NGINX Ingress using its Helm chart, it&#39;s important to avoid annotating the entire namespace with <strong><code>linkerd.io/inject: enabled</code></strong>. This precaution is due to the Helm chart creating various Kubernetes resources, including short-lived pods, that should not be meshed. Instead, the annotation should be applied directly to the Deployment resource.</p><p>The following <strong><code>nginx-values.yaml</code></strong> configuration should be used with the ingress-nginx Helm chart to ensure the NGINX Ingress controller is meshed properly</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># nginx-values.yaml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Configuring the NGINX Ingress service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Setting a specific LoadBalancer IP address</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    loadBalancerIP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0.0.100</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Configuration for the NGINX controller</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Enabling metrics collection for Prometheus</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  metrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Set to true to enable Prometheus metrics on TCP port 10254</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Customizing access logs</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Changing the path where access logs are stored</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    access-log-path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/data/access.log&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Logs will be stored in /data/access.log instead of stdout</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Setting log format to JSON for better parsing</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    log-format-escape-json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Access logs will be in JSON format for easier processing</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Adding extra volume mounts to the controller</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  extraVolumeMounts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">data</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      mountPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/data</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Mounting the /data directory in the NGINX pod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Declaring extra volumes for the controller</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  extraVolumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">data</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      emptyDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creating an empty directory at /data for log storage</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Adding extra containers to the NGINX pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  extraContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">stream-accesslog</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">busybox</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Using the BusyBox image for the sidecar container</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tail -n+1 -F /data/access.log</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Command to continuously stream the access log</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      imagePullPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Always</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Ensuring the latest BusyBox image is used</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># No specific resources allocated to the sidecar container</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      terminationMessagePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/termination-log</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      terminationMessagePolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">File</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      volumeMounts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mountPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/data</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">data</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Mounting the same /data volume as in the main container</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Enabling the use of configuration snippet annotations</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  allowSnippetAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Allows using nginx.ingress.kubernetes.io/configuration-snippet annotations</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Annotating the NGINX controller pod for Linkerd injection</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  podAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    linkerd.io/inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Note: Adjust the configurations as per your environment requirements.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The loadBalancerIP should be an available IP from your LoadBalancer pool.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Enable only the features that are needed for your use case.</span></span></code></pre></div><p><strong>Configuring NGINX Ingress for Linkerd&#39;s Routing and Load Balancing:</strong></p><p>To utilize Linkerd&#39;s routing and load balancing features, ingress resources, <strong><code>nginx-ingress.yaml</code></strong>, must be annotated with <strong><code>nginx.ingress.kubernetes.io/service-upstream: &quot;true&quot;</code></strong>. By default, the NGINX Ingress Controller configures upstreams in NGINX using a list of all pod IP addresses and ports. The specified annotation changes this behavior to use the service&#39;s Cluster IP and port as a single upstream, enhancing compatibility with Linkerd&#39;s traffic management capabilities.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">networking.k8s.io/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Ingress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nginx-ingress</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Name of the Ingress resource</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nginx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Namespace where the Ingress is deployed</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    nginx.ingress.kubernetes.io/rewrite-target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Rewrite target path</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    cert-manager.io/cluster-issuer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;letsencrypt-issuer&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Specify the cluster issuer for TLS certificates</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    nginx.ingress.kubernetes.io/service-upstream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Use a single upstream in NGINX</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ingressClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nginx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Specify the Ingress class</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  tls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">hosts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">picluster.quantfinancehub.com</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Specify the domain for the TLS certificate</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    secretName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">picluster-tls</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Name of the secret containing the TLS certificate</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">picluster.quantfinancehub.com</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Hostname to route traffic for</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Path to route traffic to</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        pathType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Prefix</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Type of path matching</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nginx-dashboard</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Name of the service to route traffic to</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">              number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Port of the service to route traffic to</span></span></code></pre></div><ul><li>Update the NGINX Ingress resources</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-ingress.yaml</span></span></code></pre></div><ul><li>Verify the application of middleware</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kubeconfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/pi/.kube/config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ingress</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-ingress</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yaml</span></span></code></pre></div>`,203)]))}const E=i(l,[["render",h]]);export{c as __pageData,E as default};
