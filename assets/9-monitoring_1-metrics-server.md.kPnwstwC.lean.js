import{_ as a,c as t,j as e,a as n,t as r,a0 as l,o as h}from"./chunks/framework.pWuaoOf3.js";const o="/pikube-kubernetes-service/assets/metrics-server.DMjothth.svg",b=JSON.parse('{"title":"Metrics Server","description":"How to install the Kubernetes Metrics Server, a foundational component for CPU/Memory usage metrics and autoscaling.","frontmatter":{"title":"Metrics Server","permalink":"/docs/metrics-server/","description":"How to install the Kubernetes Metrics Server, a foundational component for CPU/Memory usage metrics and autoscaling.","last_modified_at":"30-01-2025"},"headers":[],"relativePath":"9-monitoring/1-metrics-server.md","filePath":"9-monitoring/1-metrics-server.md"}'),p={name:"9-monitoring/1-metrics-server.md"},c={id:"frontmatter-title",tabindex:"-1"};function k(i,s,d,g,u,m){return h(),t("div",null,[e("h1",c,[n(r(i.$frontmatter.title)+" ",1),s[0]||(s[0]=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),s[1]||(s[1]=l('<p align="center"><img alt="metrics-server" src="'+o+`" width="60%" height="%"></p><p><strong>Metrics Server</strong> is a scalable, efficient source of container resource metrics in Kubernetes. It powers Kubernetes autoscaling features such as the <a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/" target="_blank" rel="noreferrer">Horizontal Pod Autoscaler (HPA)</a> and the <a href="https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler" target="_blank" rel="noreferrer">Vertical Pod Autoscaler</a>, and also provides metrics for <code>kubectl top</code>. This enables both real-time usage visibility and the ability to automatically scale workloads based on CPU and memory consumption.</p><h2 id="how-does-it-work" tabindex="-1">How Does It Work? <a class="header-anchor" href="#how-does-it-work" aria-label="Permalink to &quot;How Does It Work?&quot;">​</a></h2><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart RL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subgraph cluster[Cluster]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    direction RL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    S[&lt;br&gt;&lt;br&gt;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Metrics-&lt;br&gt;Server]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subgraph B[Nodes]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      direction TB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      D[cAdvisor] --&gt; C[kubelet]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      E[Container&lt;br&gt;runtime] --&gt; D</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      E1[Container&lt;br&gt;runtime] --&gt; D</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      P[pod data] -.- C</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    L[API&lt;br&gt;server]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    W[HPA]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C ----&gt;|node-level&lt;br&gt;resource metrics| A --&gt;|Metrics&lt;br&gt;API| L --&gt; W</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L ---&gt; K[kubectl&lt;br&gt;top]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classDef box fill:#fff,stroke:#000,stroke-width:1px,color:#000;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class W,B,P,K,cluster,D,E,E1 box</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classDef spacewhite fill:#ffffff,stroke:#fff,stroke-width:0px,color:#000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class S spacewhite</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classDef k8s fill:#326ce5,stroke:#fff,stroke-width:1px,color:#fff;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class A,L,C k8s</span></span></code></pre></div><p><em>Diagram adapted from <a href="https://kubernetes.io/docs/tasks/debug/debug-cluster/resource-metrics-pipeline/" target="_blank" rel="noreferrer">Kubernetes Resource Metrics Pipeline</a>.</em></p><ul><li><strong>metrics-server</strong> queries each node’s <strong>kubelet</strong> for CPU and memory usage.</li><li><strong>kubelet</strong> aggregates container runtime usage stats (often via <a href="https://github.com/google/cadvisor" target="_blank" rel="noreferrer">cAdvisor</a>) and exposes them through the <strong>Resource Metrics API</strong>.</li><li><strong>metrics-server</strong> then exposes these aggregated metrics to the Kubernetes <strong>API server</strong>.</li><li><code>kubectl top</code> can read these values to debug usage, while <strong>HPA</strong> uses them to scale pods automatically.</li></ul><h2 id="metrics-server-in-k3s" tabindex="-1">Metrics Server in K3s <a class="header-anchor" href="#metrics-server-in-k3s" aria-label="Permalink to &quot;Metrics Server in K3s&quot;">​</a></h2><p>K3s installs Metrics Server by default as an add-on, so you typically have a working metrics pipeline out of the box. If needed, you can disable it (<code>--disable metrics-server</code> when installing K3s) and install your own Helm-managed instance for greater version or config control.</p><h2 id="installing-metrics-server-via-helm" tabindex="-1">Installing Metrics Server via Helm <a class="header-anchor" href="#installing-metrics-server-via-helm" aria-label="Permalink to &quot;Installing Metrics Server via Helm&quot;">​</a></h2><p>If you’re on a cluster that doesn’t include Metrics Server by default (or you disabled it in K3s), you can install it via the <a href="https://github.com/kubernetes-sigs/metrics-server/tree/master/charts/metrics-server" target="_blank" rel="noreferrer">official Helm chart</a>:</p><ul><li>Add the repository:</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> metrics-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://kubernetes-sigs.github.io/metrics-server/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><ul><li>Install into the <code>kube-system</code> namespace (or another namespace you prefer):</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> metrics-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> metrics-server/metrics-server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-system</span></span></code></pre></div><ul><li>Verify installation:</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pods</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-system</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> metrics-server</span></span></code></pre></div><ul><li>If everything is running smoothly, you can then confirm metrics availability:</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> top</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> top</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pods</span></span></code></pre></div><p>These commands should display current CPU/memory usage, confirming that <strong>Metrics Server</strong> is correctly providing resource data to the cluster.</p>`,19))])}const y=a(p,[["render",k]]);export{b as __pageData,y as default};
